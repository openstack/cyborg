[tox]
minversion = 3.18.0
envlist = py3,pep8
# Automatic envs (pyXX) will only use the python version appropriate to that
# env and ignore basepython inherited from [testenv] if we set
# ignore_basepython_conflict.
ignore_basepython_conflict = True

[testenv]
basepython = python3
usedevelop = True
allowlist_externals =
  bash
  find
  rm
  env
  make
setenv =
    VIRTUAL_ENV={envdir}
    OS_TEST_PATH=cyborg/tests/unit
deps =
  -c{env:TOX_CONSTRAINTS_FILE:https://releases.openstack.org/constraints/upper/master}
  -r{toxinidir}/requirements.txt
  -r{toxinidir}/test-requirements.txt

commands = rm -f .testrepository/times.dbm
           stestr run --slowest {posargs}

[testenv:genpolicy]
sitepackages = False
envdir = {toxworkdir}/venv
commands =
    oslopolicy-sample-generator --config-file=tools/config/cyborg-policy-generator.conf

[testenv:genconfig]
sitepackages = False
envdir = {toxworkdir}/venv
commands =
    oslo-config-generator --config-file=tools/config/cyborg-config-generator.conf

[testenv:bindep]
# Do not install any requirements. We want this to be fast and work even if
# system dependencies are missing, since it's used to tell you what system
# dependencies are missing! This also means that bindep must be installed
# separately, outside of the requirements files, and develop mode disabled
# explicitly to avoid unnecessarily installing the checked-out repo too (this
# further relies on "tox.skipsdist = True" above).
deps = bindep
commands = bindep test
usedevelop = False

[testenv:pep8]
description =
  Run style checks.
envdir = {toxworkdir}/shared
commands =
  bash tools/flake8wrap.sh {posargs}
  # Check that all JSON files don't have \r\n in line.
  bash -c "! find doc/ -type f -name *.json | xargs grep -U -n $'\r'"
  # Check that all included JSON files are valid JSON
  bash -c '! find doc/ -type f -name *.json | grep -v 'curl' | xargs -t -n1 python -m json.tool 2>&1 > /dev/null | grep -B1 -v ^python'
  bash tools/check-cherry-picks.sh
  doc8 doc/source/ CONTRIBUTING.rst HACKING.rst README.rst

[testenv:fast8]
description =
  Run style checks on the changes made since HEAD~. For a full run including docs, use 'pep8'
envdir = {toxworkdir}/shared
commands =
  bash tools/flake8wrap.sh -HEAD

[testenv:venv]
commands = {posargs}

[testenv:cover]
setenv =
    PYTHON=coverage run --source cyborg --parallel-mode
commands =
    coverage erase
    stestr run {posargs}
    coverage combine
    coverage html -d cover
    coverage xml -o cover/coverage.xml
    coverage report

[doc8]
ignore-path = .venv,.git,.tox,*cyborg/locale*,*lib/python*,*cyborg.egg*,api-ref/build,doc/build,doc/source/contributor/api


[testenv:docs]
description =
  Build main documentation.
allowlist_externals =
  sphinx-build
  rm
deps =
  -c{env:TOX_CONSTRAINTS_FILE:https://releases.openstack.org/constraints/upper/master}
  -r{toxinidir}/doc/requirements.txt
commands =
    rm -rf doc/build/html
    sphinx-build -W -b html doc/source doc/build/html

[testenv:pdf-docs]
description =
  Build PDF documentation.
envdir = {toxworkdir}/docs
deps = {[testenv:docs]deps}
commands =
  rm -rf doc/build/pdf
  sphinx-build -W -b latex doc/source doc/build/pdf
  make -C doc/build/pdf

[testenv:releasenotes]
description =
  Generate release notes.
envdir = {toxworkdir}/docs
deps = {[testenv:docs]deps}
commands = sphinx-build -a -W -E -d releasenotes/build/doctrees -b html releasenotes/source releasenotes/build/html

[testenv:debug]
commands = oslo_debug_helper -t cyborg/tests {posargs}

[testenv:api-ref]
description =
  Generate the API ref. Called from CI scripts to test and publish to docs.openstack.org.
# This environment is called from CI scripts to test and publish
# the API Ref to docs.openstack.org.
envdir = {toxworkdir}/docs
deps = {[testenv:docs]deps}
commands =
  rm -rf api-ref/build
  sphinx-build -W -b html -d api-ref/build/doctrees api-ref/source api-ref/build/html
allowlist_externals = rm

[flake8]
filename = *.py,app.wsgi
show-source = True
ignore = E123,E125,H405,W503,W504
builtins = _
enable-extensions = H106,H203,H904
exclude=.venv,.git,.tox,dist,doc,*lib/python*,*egg,build,*sqlalchemy/alembic/versions/*,demo/,releasenotes

[testenv:bandit]
commands = bandit -r cyborg -x cyborg/tests/* -n 5 -ll

[flake8:local-plugins]
extension =
  M302 = checks:assert_equal_not_none
  M310 = checks:use_timeutils_utcnow
  M316 = checks:assert_true_isinstance
  M322 = checks:no_mutable_default_args
  M336 = checks:dict_constructor_with_list_copy
  M338 = checks:assert_equal_in
  M339 = checks:no_xrange
  M340 = checks:check_explicit_underscore_import
  M352 = checks:no_log_warn
  N366 = checks:import_stock_mock
paths = ./cyborg/hacking
